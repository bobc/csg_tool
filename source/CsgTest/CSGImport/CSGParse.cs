// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  ZARQUON
// DateTime: 31/05/2015 14:54:30
// UserName: bob
// Input file <csg.y - 31/05/2015 14:54:28>

// options: no-lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace CSGImport
{
public enum Tokens {error=2,EOF=3,group=4,sphere=5,cylinder=6,
    cube=7,multmatrix=8,intersection=9,difference=10,union=11,rotate_extrude=12,
    linear_extrude=13,_true=14,_false=15,circle=16,square=17,polygon=18,
    paths=19,points=20,undef=21,polyhedron=22,triangles=23,faces=24,
    render=25,surface=26,hull=27,minkowski=28,projection=29,import=30,
    color=31,offset=32,resize=33,NUMBER=34,LPAREN=35,RPAREN=36,
    OBRACE=37,EBRACE=38,OSQUARE=39,ESQUARE=40,COMMA=41,SEMICOL=42,
    EQ=43,STRING=44,ID=45,DOT=46,MODIFIER_BACK=47,MODIFIER_DEBUG=48,
    MODIFIER_ROOT=49,MODIFIER_DISABLE=50};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<CSGImport.Node, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[96];
  private static State[] states = new State[293];
  private static string[] nonTerms = new string[] {
      "module", "$accept", "block_list", "statement", "statementwithmod", "part", 
      "operation", "multmatrix_action", "group_action1", "group_action2", "color_action", 
      "render_action", "offset_action", "resize_action", "anymodifier", "sphere_action", 
      "cylinder_action", "cube_action", "circle_action", "square_action", "polygon_action_nopath", 
      "polygon_action_plus_path", "polyhedron_action", "difference_action", "intersection_action", 
      "union_action", "rotate_extrude_action", "linear_extrude_with_twist", "rotate_extrude_file", 
      "import_file1", "surface_action", "projection_action", "hull_action", "minkowski_action", 
      "matrix", "keywordargument_list", "vector", "points_list_2d", "path_set", 
      "points_list_3d", "size_vector", "point_3d", "point_2d", "boolean", "stripped_string", 
      "keywordargument", "path_points", "path_list", };

  static Parser() {
    states[0] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-1,1,-3,3,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273,3,-2},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[4] = new State(-4);
    states[5] = new State(-6);
    states[6] = new State(-7);
    states[7] = new State(-21);
    states[8] = new State(new int[]{35,9});
    states[9] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,10,-46,37});
    states[10] = new State(new int[]{36,11,41,13});
    states[11] = new State(new int[]{42,12});
    states[12] = new State(-47);
    states[13] = new State(new int[]{45,15},new int[]{-46,14});
    states[14] = new State(-76);
    states[15] = new State(new int[]{43,16});
    states[16] = new State(new int[]{34,18,14,23,15,24,39,25,44,36},new int[]{-44,17,-41,19,-37,20,-43,21,-45,22});
    states[17] = new State(-78);
    states[18] = new State(-79);
    states[19] = new State(-80);
    states[20] = new State(-81);
    states[21] = new State(-82);
    states[22] = new State(-83);
    states[23] = new State(-72);
    states[24] = new State(-73);
    states[25] = new State(new int[]{34,26});
    states[26] = new State(new int[]{41,27});
    states[27] = new State(new int[]{34,28});
    states[28] = new State(new int[]{41,29,40,35});
    states[29] = new State(new int[]{34,30});
    states[30] = new State(new int[]{40,31,41,32});
    states[31] = new State(-69);
    states[32] = new State(new int[]{34,33});
    states[33] = new State(new int[]{40,34});
    states[34] = new State(-68);
    states[35] = new State(-71);
    states[36] = new State(-74);
    states[37] = new State(-75);
    states[38] = new State(-22);
    states[39] = new State(new int[]{35,40});
    states[40] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,41,-46,37});
    states[41] = new State(new int[]{36,42,41,13});
    states[42] = new State(new int[]{42,43});
    states[43] = new State(-48);
    states[44] = new State(-23);
    states[45] = new State(new int[]{35,46});
    states[46] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,47,-46,37});
    states[47] = new State(new int[]{36,48,41,13});
    states[48] = new State(new int[]{42,49});
    states[49] = new State(-49);
    states[50] = new State(-24);
    states[51] = new State(new int[]{35,52});
    states[52] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,53,-46,37});
    states[53] = new State(new int[]{36,54,41,13});
    states[54] = new State(new int[]{42,55});
    states[55] = new State(-50);
    states[56] = new State(-25);
    states[57] = new State(new int[]{35,58});
    states[58] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,59,-46,37});
    states[59] = new State(new int[]{36,60,41,13});
    states[60] = new State(new int[]{42,61});
    states[61] = new State(-51);
    states[62] = new State(-26);
    states[63] = new State(new int[]{35,64});
    states[64] = new State(new int[]{20,65});
    states[65] = new State(new int[]{43,66});
    states[66] = new State(new int[]{39,67});
    states[67] = new State(new int[]{39,97},new int[]{-38,68,-43,101});
    states[68] = new State(new int[]{40,69,39,97},new int[]{-43,95});
    states[69] = new State(new int[]{41,70});
    states[70] = new State(new int[]{19,71});
    states[71] = new State(new int[]{43,72});
    states[72] = new State(new int[]{21,73,39,78});
    states[73] = new State(new int[]{41,74});
    states[74] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,75,-46,37});
    states[75] = new State(new int[]{36,76,41,13});
    states[76] = new State(new int[]{42,77});
    states[77] = new State(-52);
    states[78] = new State(new int[]{39,87},new int[]{-39,79,-48,94});
    states[79] = new State(new int[]{40,80,41,85});
    states[80] = new State(new int[]{41,81});
    states[81] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,82,-46,37});
    states[82] = new State(new int[]{36,83,41,13});
    states[83] = new State(new int[]{42,84});
    states[84] = new State(-53);
    states[85] = new State(new int[]{39,87},new int[]{-48,86});
    states[86] = new State(-95);
    states[87] = new State(new int[]{34,92},new int[]{-47,88});
    states[88] = new State(new int[]{40,89,34,90});
    states[89] = new State(-93);
    states[90] = new State(new int[]{41,91,40,-92,34,-92});
    states[91] = new State(-91);
    states[92] = new State(new int[]{41,93});
    states[93] = new State(-90);
    states[94] = new State(-94);
    states[95] = new State(new int[]{41,96,40,-86,39,-86});
    states[96] = new State(-85);
    states[97] = new State(new int[]{34,98});
    states[98] = new State(new int[]{41,99});
    states[99] = new State(new int[]{34,100});
    states[100] = new State(new int[]{40,35});
    states[101] = new State(new int[]{41,102});
    states[102] = new State(-84);
    states[103] = new State(-27);
    states[104] = new State(-28);
    states[105] = new State(new int[]{35,106});
    states[106] = new State(new int[]{20,107});
    states[107] = new State(new int[]{43,108});
    states[108] = new State(new int[]{39,109});
    states[109] = new State(new int[]{39,124},new int[]{-40,110,-42,131});
    states[110] = new State(new int[]{40,111,39,124},new int[]{-42,122});
    states[111] = new State(new int[]{41,112});
    states[112] = new State(new int[]{24,113,23,133});
    states[113] = new State(new int[]{43,114});
    states[114] = new State(new int[]{39,115});
    states[115] = new State(new int[]{39,124},new int[]{-40,116,-42,131});
    states[116] = new State(new int[]{40,117,39,124},new int[]{-42,122});
    states[117] = new State(new int[]{41,118});
    states[118] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,119,-46,37});
    states[119] = new State(new int[]{36,120,41,13});
    states[120] = new State(new int[]{42,121});
    states[121] = new State(-54);
    states[122] = new State(new int[]{41,123,40,-89,39,-89});
    states[123] = new State(-88);
    states[124] = new State(new int[]{34,125});
    states[125] = new State(new int[]{41,126});
    states[126] = new State(new int[]{34,127});
    states[127] = new State(new int[]{41,128});
    states[128] = new State(new int[]{34,129});
    states[129] = new State(new int[]{40,130});
    states[130] = new State(-70);
    states[131] = new State(new int[]{41,132});
    states[132] = new State(-87);
    states[133] = new State(new int[]{43,134});
    states[134] = new State(new int[]{39,135});
    states[135] = new State(new int[]{39,124},new int[]{-40,136,-42,131});
    states[136] = new State(new int[]{40,137,39,124},new int[]{-42,122});
    states[137] = new State(new int[]{41,138});
    states[138] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,139,-46,37});
    states[139] = new State(new int[]{36,140,41,13});
    states[140] = new State(new int[]{42,141});
    states[141] = new State(-55);
    states[142] = new State(-8);
    states[143] = new State(-29);
    states[144] = new State(new int[]{35,145});
    states[145] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,146,-46,37});
    states[146] = new State(new int[]{36,147,41,13});
    states[147] = new State(new int[]{37,148});
    states[148] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-3,149,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[149] = new State(new int[]{38,150,5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[150] = new State(-56);
    states[151] = new State(-30);
    states[152] = new State(new int[]{35,153});
    states[153] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,154,-46,37});
    states[154] = new State(new int[]{36,155,41,13});
    states[155] = new State(new int[]{37,156});
    states[156] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-3,157,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[157] = new State(new int[]{38,158,5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[158] = new State(-57);
    states[159] = new State(-31);
    states[160] = new State(new int[]{35,161});
    states[161] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,162,-46,37});
    states[162] = new State(new int[]{36,163,41,13});
    states[163] = new State(new int[]{37,164});
    states[164] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-3,165,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[165] = new State(new int[]{38,166,5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[166] = new State(-58);
    states[167] = new State(-32);
    states[168] = new State(new int[]{35,169});
    states[169] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,170,-46,37});
    states[170] = new State(new int[]{36,171,41,13});
    states[171] = new State(new int[]{37,172,42,292});
    states[172] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-3,173,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[173] = new State(new int[]{38,174,5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[174] = new State(-59);
    states[175] = new State(-33);
    states[176] = new State(new int[]{35,177});
    states[177] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,178,-46,37});
    states[178] = new State(new int[]{36,179,41,13});
    states[179] = new State(new int[]{37,180});
    states[180] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-3,181,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[181] = new State(new int[]{38,182,5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[182] = new State(-60);
    states[183] = new State(-34);
    states[184] = new State(-35);
    states[185] = new State(new int[]{35,186});
    states[186] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,187,-46,37});
    states[187] = new State(new int[]{36,188,41,13});
    states[188] = new State(new int[]{42,189});
    states[189] = new State(-62);
    states[190] = new State(-36);
    states[191] = new State(new int[]{35,192});
    states[192] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,193,-46,37});
    states[193] = new State(new int[]{36,194,41,13});
    states[194] = new State(new int[]{42,195});
    states[195] = new State(-63);
    states[196] = new State(-37);
    states[197] = new State(new int[]{35,198});
    states[198] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,199,-46,37});
    states[199] = new State(new int[]{36,200,41,13});
    states[200] = new State(new int[]{37,201});
    states[201] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-3,202,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[202] = new State(new int[]{38,203,5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[203] = new State(-64);
    states[204] = new State(-38);
    states[205] = new State(new int[]{35,206});
    states[206] = new State(new int[]{36,207});
    states[207] = new State(new int[]{37,208});
    states[208] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-3,209,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[209] = new State(new int[]{38,210,5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[210] = new State(-65);
    states[211] = new State(-39);
    states[212] = new State(new int[]{35,213});
    states[213] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,214,-46,37});
    states[214] = new State(new int[]{36,215,41,13});
    states[215] = new State(new int[]{37,216});
    states[216] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-3,217,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[217] = new State(new int[]{38,218,5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[218] = new State(-66);
    states[219] = new State(-9);
    states[220] = new State(new int[]{35,221});
    states[221] = new State(new int[]{39,283},new int[]{-35,222});
    states[222] = new State(new int[]{36,223});
    states[223] = new State(new int[]{37,224});
    states[224] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-3,225,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[225] = new State(new int[]{38,226,5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[226] = new State(-40);
    states[227] = new State(-10);
    states[228] = new State(new int[]{35,229});
    states[229] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,230,-46,37});
    states[230] = new State(new int[]{36,231,41,13});
    states[231] = new State(new int[]{37,232,42,282});
    states[232] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-3,233,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[233] = new State(new int[]{38,234,5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[234] = new State(-41);
    states[235] = new State(-11);
    states[236] = new State(-12);
    states[237] = new State(new int[]{35,238});
    states[238] = new State(new int[]{39,276},new int[]{-37,239});
    states[239] = new State(new int[]{36,240});
    states[240] = new State(new int[]{37,241});
    states[241] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-3,242,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[242] = new State(new int[]{38,243,5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[243] = new State(-43);
    states[244] = new State(-13);
    states[245] = new State(new int[]{35,246});
    states[246] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,247,-46,37});
    states[247] = new State(new int[]{36,248,41,13});
    states[248] = new State(new int[]{37,249});
    states[249] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-3,250,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[250] = new State(new int[]{38,251,5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[251] = new State(-44);
    states[252] = new State(-14);
    states[253] = new State(new int[]{35,254});
    states[254] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,255,-46,37});
    states[255] = new State(new int[]{36,256,41,13});
    states[256] = new State(new int[]{37,257});
    states[257] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-3,258,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[258] = new State(new int[]{38,259,5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[259] = new State(-45);
    states[260] = new State(-15);
    states[261] = new State(new int[]{35,262});
    states[262] = new State(new int[]{45,15,36,-77,41,-77},new int[]{-36,263,-46,37});
    states[263] = new State(new int[]{36,264,41,13});
    states[264] = new State(new int[]{37,265});
    states[265] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-3,266,-4,274,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-5,275,-15,268});
    states[266] = new State(new int[]{38,267,5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261,47,270,48,271,49,272,50,273},new int[]{-4,4,-5,5,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260,-15,268});
    states[267] = new State(-46);
    states[268] = new State(new int[]{5,8,6,39,7,45,16,51,17,57,18,63,22,105,10,144,9,152,11,160,12,168,13,176,30,185,26,191,29,197,27,205,28,212,8,220,4,228,31,237,25,245,32,253,33,261},new int[]{-4,269,-6,6,-16,7,-17,38,-18,44,-19,50,-20,56,-21,62,-22,103,-23,104,-7,142,-24,143,-25,151,-26,159,-27,167,-28,175,-29,183,-30,184,-31,190,-32,196,-33,204,-34,211,-8,219,-9,227,-10,235,-11,236,-12,244,-13,252,-14,260});
    states[269] = new State(-16);
    states[270] = new State(-17);
    states[271] = new State(-18);
    states[272] = new State(-19);
    states[273] = new State(-20);
    states[274] = new State(-3);
    states[275] = new State(-5);
    states[276] = new State(new int[]{34,277});
    states[277] = new State(new int[]{41,278});
    states[278] = new State(new int[]{34,279});
    states[279] = new State(new int[]{41,280});
    states[280] = new State(new int[]{34,281});
    states[281] = new State(new int[]{41,32});
    states[282] = new State(-42);
    states[283] = new State(new int[]{39,276},new int[]{-37,284});
    states[284] = new State(new int[]{41,285});
    states[285] = new State(new int[]{39,276},new int[]{-37,286});
    states[286] = new State(new int[]{41,287});
    states[287] = new State(new int[]{39,276},new int[]{-37,288});
    states[288] = new State(new int[]{41,289});
    states[289] = new State(new int[]{39,276},new int[]{-37,290});
    states[290] = new State(new int[]{40,291});
    states[291] = new State(-67);
    states[292] = new State(-61);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-3,-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-3, new int[]{-3,-5});
    rules[7] = new Rule(-4, new int[]{-6});
    rules[8] = new Rule(-4, new int[]{-7});
    rules[9] = new Rule(-4, new int[]{-8});
    rules[10] = new Rule(-4, new int[]{-9});
    rules[11] = new Rule(-4, new int[]{-10});
    rules[12] = new Rule(-4, new int[]{-11});
    rules[13] = new Rule(-4, new int[]{-12});
    rules[14] = new Rule(-4, new int[]{-13});
    rules[15] = new Rule(-4, new int[]{-14});
    rules[16] = new Rule(-5, new int[]{-15,-4});
    rules[17] = new Rule(-15, new int[]{47});
    rules[18] = new Rule(-15, new int[]{48});
    rules[19] = new Rule(-15, new int[]{49});
    rules[20] = new Rule(-15, new int[]{50});
    rules[21] = new Rule(-6, new int[]{-16});
    rules[22] = new Rule(-6, new int[]{-17});
    rules[23] = new Rule(-6, new int[]{-18});
    rules[24] = new Rule(-6, new int[]{-19});
    rules[25] = new Rule(-6, new int[]{-20});
    rules[26] = new Rule(-6, new int[]{-21});
    rules[27] = new Rule(-6, new int[]{-22});
    rules[28] = new Rule(-6, new int[]{-23});
    rules[29] = new Rule(-7, new int[]{-24});
    rules[30] = new Rule(-7, new int[]{-25});
    rules[31] = new Rule(-7, new int[]{-26});
    rules[32] = new Rule(-7, new int[]{-27});
    rules[33] = new Rule(-7, new int[]{-28});
    rules[34] = new Rule(-7, new int[]{-29});
    rules[35] = new Rule(-7, new int[]{-30});
    rules[36] = new Rule(-7, new int[]{-31});
    rules[37] = new Rule(-7, new int[]{-32});
    rules[38] = new Rule(-7, new int[]{-33});
    rules[39] = new Rule(-7, new int[]{-34});
    rules[40] = new Rule(-8, new int[]{8,35,-35,36,37,-3,38});
    rules[41] = new Rule(-9, new int[]{4,35,-36,36,37,-3,38});
    rules[42] = new Rule(-10, new int[]{4,35,-36,36,42});
    rules[43] = new Rule(-11, new int[]{31,35,-37,36,37,-3,38});
    rules[44] = new Rule(-12, new int[]{25,35,-36,36,37,-3,38});
    rules[45] = new Rule(-13, new int[]{32,35,-36,36,37,-3,38});
    rules[46] = new Rule(-14, new int[]{33,35,-36,36,37,-3,38});
    rules[47] = new Rule(-16, new int[]{5,35,-36,36,42});
    rules[48] = new Rule(-17, new int[]{6,35,-36,36,42});
    rules[49] = new Rule(-18, new int[]{7,35,-36,36,42});
    rules[50] = new Rule(-19, new int[]{16,35,-36,36,42});
    rules[51] = new Rule(-20, new int[]{17,35,-36,36,42});
    rules[52] = new Rule(-21, new int[]{18,35,20,43,39,-38,40,41,19,43,21,41,-36,36,42});
    rules[53] = new Rule(-22, new int[]{18,35,20,43,39,-38,40,41,19,43,39,-39,40,41,-36,36,42});
    rules[54] = new Rule(-23, new int[]{22,35,20,43,39,-40,40,41,24,43,39,-40,40,41,-36,36,42});
    rules[55] = new Rule(-23, new int[]{22,35,20,43,39,-40,40,41,23,43,39,-40,40,41,-36,36,42});
    rules[56] = new Rule(-24, new int[]{10,35,-36,36,37,-3,38});
    rules[57] = new Rule(-25, new int[]{9,35,-36,36,37,-3,38});
    rules[58] = new Rule(-26, new int[]{11,35,-36,36,37,-3,38});
    rules[59] = new Rule(-27, new int[]{12,35,-36,36,37,-3,38});
    rules[60] = new Rule(-28, new int[]{13,35,-36,36,37,-3,38});
    rules[61] = new Rule(-29, new int[]{12,35,-36,36,42});
    rules[62] = new Rule(-30, new int[]{30,35,-36,36,42});
    rules[63] = new Rule(-31, new int[]{26,35,-36,36,42});
    rules[64] = new Rule(-32, new int[]{29,35,-36,36,37,-3,38});
    rules[65] = new Rule(-33, new int[]{27,35,36,37,-3,38});
    rules[66] = new Rule(-34, new int[]{28,35,-36,36,37,-3,38});
    rules[67] = new Rule(-35, new int[]{39,-37,41,-37,41,-37,41,-37,40});
    rules[68] = new Rule(-37, new int[]{39,34,41,34,41,34,41,34,40});
    rules[69] = new Rule(-41, new int[]{39,34,41,34,41,34,40});
    rules[70] = new Rule(-42, new int[]{39,34,41,34,41,34,40});
    rules[71] = new Rule(-43, new int[]{39,34,41,34,40});
    rules[72] = new Rule(-44, new int[]{14});
    rules[73] = new Rule(-44, new int[]{15});
    rules[74] = new Rule(-45, new int[]{44});
    rules[75] = new Rule(-36, new int[]{-46});
    rules[76] = new Rule(-36, new int[]{-36,41,-46});
    rules[77] = new Rule(-36, new int[]{});
    rules[78] = new Rule(-46, new int[]{45,43,-44});
    rules[79] = new Rule(-46, new int[]{45,43,34});
    rules[80] = new Rule(-46, new int[]{45,43,-41});
    rules[81] = new Rule(-46, new int[]{45,43,-37});
    rules[82] = new Rule(-46, new int[]{45,43,-43});
    rules[83] = new Rule(-46, new int[]{45,43,-45});
    rules[84] = new Rule(-38, new int[]{-43,41});
    rules[85] = new Rule(-38, new int[]{-38,-43,41});
    rules[86] = new Rule(-38, new int[]{-38,-43});
    rules[87] = new Rule(-40, new int[]{-42,41});
    rules[88] = new Rule(-40, new int[]{-40,-42,41});
    rules[89] = new Rule(-40, new int[]{-40,-42});
    rules[90] = new Rule(-47, new int[]{34,41});
    rules[91] = new Rule(-47, new int[]{-47,34,41});
    rules[92] = new Rule(-47, new int[]{-47,34});
    rules[93] = new Rule(-48, new int[]{39,-47,40});
    rules[94] = new Rule(-39, new int[]{-48});
    rules[95] = new Rule(-39, new int[]{-39,41,-48});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // module -> block_list
{ StoreResult (ValueStack[ValueStack.Depth-1]); }
        break;
      case 3: // block_list -> statement
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 4: // block_list -> block_list, statement
{ CurrentSemanticValue = MakeBinary (NodeTag.blocklist, ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
        break;
      case 5: // block_list -> statementwithmod
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 6: // block_list -> block_list, statementwithmod
{ CurrentSemanticValue = MakeBinary (NodeTag.blocklist, ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
        break;
      case 7: // statement -> part
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 8: // statement -> operation
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 9: // statement -> multmatrix_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 10: // statement -> group_action1
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 11: // statement -> group_action2
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 12: // statement -> color_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 13: // statement -> render_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 14: // statement -> offset_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 15: // statement -> resize_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 16: // statementwithmod -> anymodifier, statement
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 21: // part -> sphere_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 22: // part -> cylinder_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 23: // part -> cube_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 24: // part -> circle_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 25: // part -> square_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 26: // part -> polygon_action_nopath
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 27: // part -> polygon_action_plus_path
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 28: // part -> polyhedron_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 29: // operation -> difference_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 30: // operation -> intersection_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 31: // operation -> union_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 32: // operation -> rotate_extrude_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 33: // operation -> linear_extrude_with_twist
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 34: // operation -> rotate_extrude_file
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 35: // operation -> import_file1
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 36: // operation -> surface_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 37: // operation -> projection_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 38: // operation -> hull_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 39: // operation -> minkowski_action
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 40: // multmatrix_action -> multmatrix, LPAREN, matrix, RPAREN, OBRACE, block_list, 
               //                      EBRACE
{ CurrentSemanticValue = MakeBinary (NodeTag.multmatrix, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-2]); }
        break;
      case 41: // group_action1 -> group, LPAREN, keywordargument_list, RPAREN, OBRACE, 
               //                  block_list, EBRACE
{ CurrentSemanticValue = MakeBinary (NodeTag.group, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-2]); }
        break;
      case 42: // group_action2 -> group, LPAREN, keywordargument_list, RPAREN, SEMICOL
{ CurrentSemanticValue = MakeBinary (NodeTag.group, null, null); }
        break;
      case 43: // color_action -> color, LPAREN, vector, RPAREN, OBRACE, block_list, EBRACE
{ CurrentSemanticValue = MakeBinary (NodeTag.color, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-2]); }
        break;
      case 47: // sphere_action -> sphere, LPAREN, keywordargument_list, RPAREN, SEMICOL
{ CurrentSemanticValue = MakeBinary (NodeTag.sphere, ValueStack[ValueStack.Depth-3], null); }
        break;
      case 48: // cylinder_action -> cylinder, LPAREN, keywordargument_list, RPAREN, SEMICOL
{ CurrentSemanticValue = MakeBinary (NodeTag.cylinder, ValueStack[ValueStack.Depth-3], null); }
        break;
      case 49: // cube_action -> cube, LPAREN, keywordargument_list, RPAREN, SEMICOL
{ CurrentSemanticValue = MakeBinary (NodeTag.cube, ValueStack[ValueStack.Depth-3], null); }
        break;
      case 56: // difference_action -> difference, LPAREN, keywordargument_list, RPAREN, OBRACE, 
               //                      block_list, EBRACE
{ CurrentSemanticValue = MakeBinary (NodeTag.difference, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-2]); }
        break;
      case 57: // intersection_action -> intersection, LPAREN, keywordargument_list, RPAREN, 
               //                        OBRACE, block_list, EBRACE
{ CurrentSemanticValue = MakeBinary (NodeTag.intersect, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-2]); }
        break;
      case 58: // union_action -> union, LPAREN, keywordargument_list, RPAREN, OBRACE, block_list, 
               //                 EBRACE
{ CurrentSemanticValue = MakeBinary (NodeTag.union, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-2]); }
        break;
      case 67: // matrix -> OSQUARE, vector, COMMA, vector, COMMA, vector, COMMA, vector, ESQUARE
{ CurrentSemanticValue = MakeLeafMatrix (ValueStack[ValueStack.Depth-8], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 68: // vector -> OSQUARE, NUMBER, COMMA, NUMBER, COMMA, NUMBER, COMMA, NUMBER, ESQUARE
{ CurrentSemanticValue = MakeLeafVector (ValueStack[ValueStack.Depth-8], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 69: // size_vector -> OSQUARE, NUMBER, COMMA, NUMBER, COMMA, NUMBER, ESQUARE
{ CurrentSemanticValue = MakeLeafVector (ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 70: // point_3d -> OSQUARE, NUMBER, COMMA, NUMBER, COMMA, NUMBER, ESQUARE
{ CurrentSemanticValue = MakeLeafVector (ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 71: // point_2d -> OSQUARE, NUMBER, COMMA, NUMBER, ESQUARE
{ CurrentSemanticValue = MakeLeafVector (ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 72: // boolean -> _true
{ CurrentSemanticValue = MakeIdLeaf("true"); }
        break;
      case 73: // boolean -> _false
{ CurrentSemanticValue = MakeIdLeaf("false"); }
        break;
      case 75: // keywordargument_list -> keywordargument
{ CurrentSemanticValue = MakeBinary (NodeTag.arglist, ValueStack[ValueStack.Depth-1], null); }
        break;
      case 76: // keywordargument_list -> keywordargument_list, COMMA, keywordargument
{ CurrentSemanticValue = MakeBinary (NodeTag.arglist, ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3]); }
        break;
      case 78: // keywordargument -> ID, EQ, boolean
{ CurrentSemanticValue = MakeBinary (NodeTag.arg, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 79: // keywordargument -> ID, EQ, NUMBER
{ CurrentSemanticValue = MakeBinary (NodeTag.arg, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 80: // keywordargument -> ID, EQ, size_vector
{ CurrentSemanticValue = MakeBinary (NodeTag.arg, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 81: // keywordargument -> ID, EQ, vector
{ CurrentSemanticValue = MakeBinary (NodeTag.arg, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 82: // keywordargument -> ID, EQ, point_2d
{ CurrentSemanticValue = MakeBinary (NodeTag.arg, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 83: // keywordargument -> ID, EQ, stripped_string
{ CurrentSemanticValue = MakeBinary (NodeTag.arg, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
